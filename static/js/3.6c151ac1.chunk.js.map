{"version":3,"sources":["utils/analytics.js","components/Page.js","state/user/hooks/index.js","hooks/useCallWithGasPrice.js","utils/calls/farms.js","state/index.js","utils/getGasPrice.js"],"names":["setup","window","gtag","track","pageview","props","googleAnalyticsConfig","event","type","Page","forwardRef","ref","children","title","other","pathname","useLocation","sendPageViewEvent","useCallback","page_path","useEffect","Box","useIsExpertMode","useSelector","state","user","userExpertMode","useExpertModeManager","dispatch","useDispatch","expertMode","toggleSetExpertMode","updateUserExpertMode","useUserSingleHopOnly","userSingleHopOnly","newSingleHopOnly","updateUserSingleHopOnly","useUserSlippageTolerance","userSlippageTolerance","slippage","updateUserSlippageTolerance","useGasPrice","userGas","gasPrice","process","ChainId","MAINNET","toString","GAS_PRICE_GWEI","testnet","toV2LiquidityToken","tokenA","tokenB","Token","chainId","UDEPair","getAddress","useTrackedTokenPairs","useActiveWeb3React","tokens","useAllTokens","pinnedPairs","useMemo","PINNED_PAIRS","generatedPairs","flatMap","Object","keys","tokenAddress","token","BASES_TO_TRACK_LIQUIDITY_FOR","map","base","address","filter","p","savedSerializedPairs","pairs","userPairs","forChain","pairId","deserializeToken","token0","token1","combinedList","concat","keyed","reduce","memo","sorted","sortsBefore","key","useCallWithGasPrice","callWithGasPrice","contract","methodName","a","methodArgs","overrides","contractMethod","get","hasManualGasPriceOverride","undefined","tx","stakeFarm","masterChefContract","pid","amount","isCompound","getGasPrice","value","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toFormat","replaceAll","enterStaking","showPromise","wait","receipt","status","deposit","showError","data","message","console","log","unstakeFarm","leaveStaking","withdraw","harvestFarm","PERSISTED_KEYS","store","configureStore","devTools","reducer","block","blockReducer","farms","farmsReducer","pools","poolsReducer","transactions","swap","burn","multicall","lists","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","updateVersion","getState","default"],"mappings":"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","file":"static/js/3.6c151ac1.chunk.js","sourcesContent":["import { googleAnalyticsConfig } from '../config';\n\n// ----------------------------------------------------------------------\n\nconst setup = (...args) => {\n  if (process.env.NODE_ENV !== 'production') {\n    return;\n  }\n  if (!window.gtag) {\n    return;\n  }\n  window.gtag(...args);\n};\n\nconst track = {\n  pageview: (props) => {\n    setup('config', googleAnalyticsConfig, props);\n  },\n  event: (type, props) => {\n    setup('event', type, props);\n  }\n};\n\nexport default track;\n","import PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { useLocation } from 'react-router-dom';\nimport { forwardRef, useEffect, useCallback } from 'react';\n// material\nimport { Box } from '@material-ui/core';\n// utils\nimport track from '../utils/analytics';\n\n// ----------------------------------------------------------------------\n\nconst Page = forwardRef(({ children, title = '', ...other }, ref) => {\n  const { pathname } = useLocation();\n\n  const sendPageViewEvent = useCallback(() => {\n    track.pageview({\n      page_path: pathname\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    sendPageViewEvent();\n  }, [sendPageViewEvent]);\n\n  return (\n    <Box ref={ref} {...other}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n    </Box>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string\n};\n\nexport default Page;\n","import { ChainId, Pair, Token } from '@pancakeswap/sdk';\r\nimport { Pair as UDEPair } from '@udegoswap/sdk';\r\nimport flatMap from 'lodash/flatMap';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from '../../../config/constants/index';\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport { useAllTokens } from '../../../hooks/Tokens';\r\nimport { addSerializedPair, addSerializedToken, FarmStakedOnly, muteAudio, removeSerializedToken, toggleTheme as toggleThemeAction, unmuteAudio, updateUserDeadline, updateUserExpertMode, updateUserFarmStakedOnly, updateUserSingleHopOnly, updateUserSlippageTolerance, updateGasPrice, addWatchlistToken, addWatchlistPool, updateUserPoolStakedOnly, updateUserPoolsViewMode, updateUserFarmsViewMode, updateUserPredictionChartDisclaimerShow, updateUserPredictionAcceptedRisk, updateUserUsernameVisibility, updateUserExpertModeAcknowledgementShow, } from '../actions';\r\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers';\r\n\r\nexport function useAudioModeManager() {\r\n    const dispatch = useDispatch();\r\n    const audioPlay = useSelector((state) => state.user.audioPlay);\r\n    const toggleSetAudioMode = useCallback(() => {\r\n        if (audioPlay) {\r\n            dispatch(muteAudio());\r\n        }\r\n        else {\r\n            dispatch(unmuteAudio());\r\n        }\r\n    }, [audioPlay, dispatch]);\r\n    return [audioPlay, toggleSetAudioMode];\r\n}\r\nexport function useIsExpertMode() {\r\n    return useSelector((state) => state.user.userExpertMode);\r\n}\r\nexport function useExpertModeManager() {\r\n    const dispatch = useDispatch();\r\n    const expertMode = useIsExpertMode();\r\n    const toggleSetExpertMode = useCallback(() => {\r\n        dispatch(updateUserExpertMode({ userExpertMode: !expertMode }));\r\n    }, [expertMode, dispatch]);\r\n    return [expertMode, toggleSetExpertMode];\r\n}\r\nexport function useThemeManager() {\r\n    const dispatch = useDispatch();\r\n    const isDark = useSelector((state) => state.user.isDark);\r\n    const toggleTheme = useCallback(() => {\r\n        dispatch(toggleThemeAction());\r\n    }, [dispatch]);\r\n    return [isDark, toggleTheme];\r\n}\r\nexport function useUserSingleHopOnly() {\r\n    const dispatch = useDispatch();\r\n    const singleHopOnly = useSelector((state) => state.user.userSingleHopOnly);\r\n    const setSingleHopOnly = useCallback((newSingleHopOnly) => {\r\n        dispatch(updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly }));\r\n    }, [dispatch]);\r\n    return [singleHopOnly, setSingleHopOnly];\r\n}\r\nexport function useUserSlippageTolerance() {\r\n    const dispatch = useDispatch();\r\n    const userSlippageTolerance = useSelector((state) => state.user.userSlippageTolerance);\r\n    const setUserSlippageTolerance = useCallback((slippage) => {\r\n        dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippage }));\r\n    }, [dispatch]);\r\n    return [userSlippageTolerance, setUserSlippageTolerance];\r\n}\r\nexport function useUserFarmStakedOnly(isActive) {\r\n    const dispatch = useDispatch();\r\n    const userFarmStakedOnly = useSelector((state) => state.user.userFarmStakedOnly);\r\n    const setUserFarmStakedOnly = useCallback((stakedOnly) => {\r\n        const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE;\r\n        dispatch(updateUserFarmStakedOnly({ userFarmStakedOnly: farmStakedOnly }));\r\n    }, [dispatch]);\r\n    return [\r\n        userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE,\r\n        setUserFarmStakedOnly,\r\n    ];\r\n}\r\nexport function useUserPoolStakedOnly() {\r\n    const dispatch = useDispatch();\r\n    const userPoolStakedOnly = useSelector((state) => state.user.userPoolStakedOnly);\r\n    const setUserPoolStakedOnly = useCallback((stakedOnly) => {\r\n        dispatch(updateUserPoolStakedOnly({ userPoolStakedOnly: stakedOnly }));\r\n    }, [dispatch]);\r\n    return [userPoolStakedOnly, setUserPoolStakedOnly];\r\n}\r\nexport function useUserPoolsViewMode() {\r\n    const dispatch = useDispatch();\r\n    const userPoolsViewMode = useSelector((state) => state.user.userPoolsViewMode);\r\n    const setUserPoolsViewMode = useCallback((viewMode) => {\r\n        dispatch(updateUserPoolsViewMode({ userPoolsViewMode: viewMode }));\r\n    }, [dispatch]);\r\n    return [userPoolsViewMode, setUserPoolsViewMode];\r\n}\r\nexport function useUserFarmsViewMode() {\r\n    const dispatch = useDispatch();\r\n    const userFarmsViewMode = useSelector((state) => state.user.userFarmsViewMode);\r\n    const setUserFarmsViewMode = useCallback((viewMode) => {\r\n        dispatch(updateUserFarmsViewMode({ userFarmsViewMode: viewMode }));\r\n    }, [dispatch]);\r\n    return [userFarmsViewMode, setUserFarmsViewMode];\r\n}\r\nexport function useUserPredictionAcceptedRisk() {\r\n    const dispatch = useDispatch();\r\n    const userPredictionAcceptedRisk = useSelector((state) => state.user.userPredictionAcceptedRisk);\r\n    const setUserPredictionAcceptedRisk = useCallback((acceptedRisk) => {\r\n        dispatch(updateUserPredictionAcceptedRisk({ userAcceptedRisk: acceptedRisk }));\r\n    }, [dispatch]);\r\n    return [userPredictionAcceptedRisk, setUserPredictionAcceptedRisk];\r\n}\r\nexport function useUserPredictionChartDisclaimerShow() {\r\n    const dispatch = useDispatch();\r\n    const userPredictionChartDisclaimerShow = useSelector((state) => state.user.userPredictionChartDisclaimerShow);\r\n    const setPredictionUserChartDisclaimerShow = useCallback((showDisclaimer) => {\r\n        dispatch(updateUserPredictionChartDisclaimerShow({ userShowDisclaimer: showDisclaimer }));\r\n    }, [dispatch]);\r\n    return [userPredictionChartDisclaimerShow, setPredictionUserChartDisclaimerShow];\r\n}\r\nexport function useUserExpertModeAcknowledgementShow() {\r\n    const dispatch = useDispatch();\r\n    const userExpertModeAcknowledgementShow = useSelector((state) => state.user.userExpertModeAcknowledgementShow);\r\n    const setUserExpertModeAcknowledgementShow = useCallback((showAcknowledgement) => {\r\n        dispatch(updateUserExpertModeAcknowledgementShow({ userExpertModeAcknowledgementShow: showAcknowledgement }));\r\n    }, [dispatch]);\r\n    return [userExpertModeAcknowledgementShow, setUserExpertModeAcknowledgementShow];\r\n}\r\nexport function useUserUsernameVisibility() {\r\n    const dispatch = useDispatch();\r\n    const userUsernameVisibility = useSelector((state) => state.user.userUsernameVisibility);\r\n    const setUserUsernameVisibility = useCallback((usernameVisibility) => {\r\n        dispatch(updateUserUsernameVisibility({ userUsernameVisibility: usernameVisibility }));\r\n    }, [dispatch]);\r\n    return [userUsernameVisibility, setUserUsernameVisibility];\r\n}\r\nexport function useUserTransactionTTL() {\r\n    const dispatch = useDispatch();\r\n    const userDeadline = useSelector((state) => state.user.userDeadline);\r\n    const setUserDeadline = useCallback((deadline) => {\r\n        dispatch(updateUserDeadline({ userDeadline: deadline }));\r\n    }, [dispatch]);\r\n    return [userDeadline, setUserDeadline];\r\n}\r\nexport function useAddUserToken() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((token) => {\r\n        dispatch(addSerializedToken({ serializedToken: serializeToken(token) }));\r\n    }, [dispatch]);\r\n}\r\nexport function useRemoveUserAddedToken() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((chainId, address) => {\r\n        dispatch(removeSerializedToken({ chainId, address }));\r\n    }, [dispatch]);\r\n}\r\nexport function useGasPrice() {\r\n    const chainId = process.env.REACT_APP_CHAIN_ID;\r\n    const userGas = useSelector((state) => state.user.gasPrice);\r\n    return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet;\r\n}\r\nexport function useGasPriceManager() {\r\n    const dispatch = useDispatch();\r\n    const userGasPrice = useGasPrice();\r\n    const setGasPrice = useCallback((gasPrice) => {\r\n        dispatch(updateGasPrice({ gasPrice }));\r\n    }, [dispatch]);\r\n    return [userGasPrice, setGasPrice];\r\n}\r\nfunction serializePair(pair) {\r\n    return {\r\n        token0: serializeToken(pair.token0),\r\n        token1: serializeToken(pair.token1),\r\n    };\r\n}\r\nexport function usePairAdder() {\r\n    const dispatch = useDispatch();\r\n    return useCallback((pair) => {\r\n        dispatch(addSerializedPair({ serializedPair: serializePair(pair) }));\r\n    }, [dispatch]);\r\n}\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]) {\r\n    return new Token(tokenA.chainId, UDEPair.getAddress(tokenA, tokenB), 18, 'UDE-LP', 'UDEGO LPs');\r\n}\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs() {\r\n    const { chainId } = useActiveWeb3React();\r\n    const tokens = useAllTokens();\r\n    // pinned pairs\r\n    // eslint-disable-next-line no-cond-assign,no-void,no-nested-ternary\r\n    const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n    // pairs for every token against every base\r\n    const generatedPairs = useMemo(() => chainId\r\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\r\n            const token = tokens[tokenAddress];\r\n            // for each token on the current chain,\r\n            return (\r\n            // loop though all bases on the current chain\r\n                // eslint-disable-next-line no-cond-assign,no-void\r\n                (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map((base) => {\r\n                if (base.address === token.address) {\r\n                    return null;\r\n                }\r\n                return [base, token];\r\n            })\r\n                .filter((p) => p !== null));\r\n        })\r\n        : [], [tokens, chainId]);\r\n    // pairs saved by users\r\n    const savedSerializedPairs = useSelector(({ user: { pairs } }) => pairs);\r\n    const userPairs = useMemo(() => {\r\n        if (!chainId || !savedSerializedPairs)\r\n            return [];\r\n        const forChain = savedSerializedPairs[chainId];\r\n        if (!forChain)\r\n            return [];\r\n        return Object.keys(forChain).map((pairId) => [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]);\r\n    }, [savedSerializedPairs, chainId]);\r\n    const combinedList = useMemo(() => userPairs.concat(generatedPairs).concat(pinnedPairs), [generatedPairs, pinnedPairs, userPairs]);\r\n    return useMemo(() => {\r\n        // dedupes pairs of tokens in the combined list\r\n        const keyed = combinedList.reduce((memo, [tokenA, tokenB]) => {\r\n            const sorted = tokenA.sortsBefore(tokenB);\r\n            const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`;\r\n            if (memo[key])\r\n                return memo;\r\n            memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA];\r\n            return memo;\r\n        }, {});\r\n        return Object.keys(keyed).map((key) => keyed[key]);\r\n    }, [combinedList]);\r\n}\r\nexport const useWatchlistTokens = () => {\r\n    let _a;\r\n    const dispatch = useDispatch();\r\n    // eslint-disable-next-line no-cond-assign,no-void\r\n    const savedTokens = (_a = useSelector((state) => state.user.watchlistTokens)) !== null && _a !== void 0 ? _a : [];\r\n    const updatedSavedTokens = useCallback((address) => {\r\n        dispatch(addWatchlistToken({ address }));\r\n    }, [dispatch]);\r\n    return [savedTokens, updatedSavedTokens];\r\n};\r\nexport const useWatchlistPools = () => {\r\n    let _a;\r\n    const dispatch = useDispatch();\r\n    // eslint-disable-next-line no-cond-assign,no-void\r\n    const savedPools = (_a = useSelector((state) => state.user.watchlistPools)) !== null && _a !== void 0 ? _a : [];\r\n    const updateSavedPools = useCallback((address) => {\r\n        dispatch(addWatchlistPool({ address }));\r\n    }, [dispatch]);\r\n    return [savedPools, updateSavedPools];\r\n};","import { useCallback } from 'react';\r\nimport { get } from 'lodash';\r\nimport { useGasPrice } from '../state/user/hooks';\r\n/**\r\n * Perform a contract call with a gas price returned from useGasPrice\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport function useCallWithGasPrice() {\r\n    const gasPrice = useGasPrice();\r\n    const callWithGasPrice = useCallback(async (contract, methodName, methodArgs = [], overrides = null) => {\r\n        const contractMethod = get(contract, methodName);\r\n        const hasManualGasPriceOverride = overrides === null || overrides === undefined ? undefined : overrides.gasPrice;\r\n        const tx = await contractMethod(...methodArgs, hasManualGasPriceOverride ? ({ ...overrides}) : ({...overrides, gasPrice}));\r\n        return tx;\r\n    }, [gasPrice]);\r\n    return { callWithGasPrice };\r\n}","import BigNumber from 'bignumber.js'\r\nimport getGasPrice from '../getGasPrice'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from '../../config/index'\r\nimport {showError, showPromise} from \"../../config/helpers\";\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount, isCompound) => {\r\n    const gasPrice = getGasPrice()\r\n    const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFormat().replaceAll(\",\", \"\")\r\n    try{\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.enterStaking(value, isCompound)\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.deposit(pid, value)\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        console.log(e)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\r\n    // const gasPrice = getGasPrice()\r\n    const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toFormat().replaceAll(\",\", \"\")\r\n    try {\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.leaveStaking(value)\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.withdraw(pid, value)\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n    const gasPrice = getGasPrice()\r\n    try {\r\n        if (pid === 0) {\r\n            const tx = await masterChefContract.enterStaking('0', false)\r\n            showPromise(tx.wait())\r\n            const receipt = await tx.wait()\r\n            return receipt.status\r\n        }\r\n\r\n        const tx = await masterChefContract.deposit(pid, '0')\r\n        showPromise(tx.wait())\r\n        const receipt = await tx.wait()\r\n        return receipt.status\r\n    }catch (e) {\r\n        showError(e.data ? e.data.message : e.message)\r\n        return null\r\n    }\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport { useDispatch } from 'react-redux';\r\nimport farmsReducer from './farms';\r\nimport poolsReducer from './pools';\r\nimport blockReducer from './block';\r\nimport { updateVersion } from './global/actions';\r\nimport user from './user/reducer';\r\nimport transactions from './transactions/reducer';\r\nimport swap from './swap/reducer';\r\nimport lists from './lists/reducer';\r\nimport burn from './burn/reducer';\r\nimport multicall from './multicall/reducer';\r\n\r\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists', 'profile'];\r\nconst store = configureStore({\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    reducer: {\r\n        block: blockReducer,\r\n        farms: farmsReducer,\r\n        pools: poolsReducer,\r\n        // Exchange\r\n        user,\r\n        transactions,\r\n        swap,\r\n        burn,\r\n        multicall,\r\n        lists,\r\n    },\r\n    middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\r\n    preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\nstore.dispatch(updateVersion());\r\n// export const useAppDispatch = () => useDispatch();\r\nexport default store;","import { ChainId } from '@pancakeswap/sdk'\r\nimport store from '../state'\r\nimport { GAS_PRICE_GWEI } from '../state/user/hooks/helpers'\r\n\r\n/**\r\n * Function to return gasPrice outwith a react component\r\n */\r\nconst getGasPrice = () => {\r\n    const chainId = process.env.REACT_APP_CHAIN_ID\r\n    const state = store.getState()\r\n    const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\r\n    return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\r\n}\r\n\r\nexport default getGasPrice\r\n"],"sourceRoot":""}