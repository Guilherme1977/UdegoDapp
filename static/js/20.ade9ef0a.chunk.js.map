{"version":3,"sources":["utils/formatNumber.js","utils/compoundApyHelpers.js","pages/stake-udego/components/InputField.js","pages/stake-udego/hooks/useStakePool.js","pages/stake-udego/hooks/useUnstakePool.js","pages/stake-udego/components/StakeAction.js","pages/stake-udego/hooks/useHarvestPool.js","pages/stake-udego/components/HarvestAction.js","pages/stake-udego/components/CompoundAction.js","pages/stake-udego/StakeActions.js","pages/pool-udego/hooks/useApprove.js","pages/stake-udego/StakeCard.js","pages/stake-udego/helpers.js","pages/UdegoStake.js","state/pools/hooks.js"],"names":["fCurrency","number","numeral","format","Number","isInteger","fPercent","fNumber","fBigNumber","decimals","ethers","utils","formatUnits","getApy","apr","compoundFrequency","days","performanceFee","daysAsDecimalOfYear","aprAsDecimal","timesCompounded","apyAsDecimal","performanceFeeAsDecimal","takenAsPerformanceFee","inputRegex","RegExp","InputField","tokenSymbol","isMax","label","placeHolder","inputValue","onInputChange","onMax","selectedToken","tokenBalance","max","onConfirm","onDismiss","account","useActiveWeb3React","useState","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","isBalanceZero","Card","sx","maxWidth","CardContent","background","margin","borderRadius","balance","stakedBalanceBigNumber","getBalanceAmount","gt","toFixed","ROUND_DOWN","e","showError","data","message","displayBalance","Button","variant","style","marginLeft","onClick","size","marginTop","Grid","container","spacing","item","xs","md","TextField","inputMode","step","min","type","fullWidth","value","parseFloat","placeholder","title","onChange","event","nextUserInput","currentTarget","replace","test","escapeRegExp","fontSize","display","alignItems","marginRight","CardActions","a","disabled","isFinite","eq","useStakePool","DEFAULT_GAS_LIMIT","sousId","isUsingBnb","isCompound","dispatch","useAppDispatch","useWeb3React","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","StakeAction","isBnbPool","pool","stakingTokenBalance","isDisabled","isUnstake","stakingToken","earningTokenPrice","userData","stakingLimit","earningToken","open","setOpen","input","setInput","console","log","color","Dialog","onClose","DialogTitle","symbol","DialogContent","dividers","address","val","useHarvestPool","handleHarvest","harvestFarm","onReward","HarvestAction","hasEarnings","needsApproval","onHarvest","CompoundAction","onCompound","StakeActions","isCompounding","timeStamp","poolCategory","harvest","PoolCategory","BINANCE","allowance","BIG_ZERO","stakedBalance","earnings","pendingReward","isStaked","toNumber","lpContract","earningTokenSymbol","requestedApproval","setRequestedApproval","callWithGasPrice","useCallWithGasPrice","handleApprove","constants","MaxUint256","tx","wait","receipt","updateUserAllowance","status","showFulfill","error","useApprovePool","useERC20","py","textAlign","padding","CardMediaStyle","styled","theme","position","justifyContent","paddingTop","top","zIndex","content","width","height","backdropFilter","WebkitBackdropFilter","borderTopLeftRadius","shape","borderRadiusMd","borderTopRightRadius","backgroundColor","alpha","palette","primary","darker","CoverImgStyle","objectFit","InfoItem","Typography","mb","FarmInfo","fontWeight","StakeCard","other","totalStaked","stakingTokenPrice","poolWeight","isAutoVault","autoCompoundFrequency","getAprData","earningsPercentageToDisplay","getTotalStakedBalance","getBalanceNumber","isCompoundPool","lastInvest","userLast","weight","differ","Date","now","hours","SvgIconStyle","src","bottom","Avatar","alt","transform","align","mt","Box","Math","round","toLocaleString","toString","Divider","formatUnit","SkeletonLoad","Array","map","_","index","sm","Skeleton","UdegoStake","themeStretch","useSettings","useSelector","state","pools","userDataLoaded","transformPool","usePools","poolsWithoutAutoVault","find","usePollFarmsPublicData","slowRefresh","useRefresh","useEffect","simpleRpcProvider","getBlockNumber","blockNumber","fetchPoolsPublicDataAsync","fetchPoolsPublicData","fetchPoolsStakingLimitsAsync","useFetchPublicPoolsData","fastRefresh","fetchPoolsUserDataAsync","useFetchUserPools","Page","PAGE_TITLE","Container","farm","id","length"],"mappings":"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","file":"static/js/20.ade9ef0a.chunk.js","sourcesContent":["import { replace } from 'lodash';\nimport numeral from 'numeral';\nimport {ethers} from \"ethers\";\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(number) {\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\n}\n\nexport function fPercent(number) {\n  return numeral(number / 100).format('0.0%');\n}\n\nexport function fNumber(number) {\n  return numeral(number).format();\n}\n\nexport function fShortenNumber(number) {\n  return replace(numeral(number).format('0.00a'), '.00', '');\n}\n\nexport function fData(number) {\n  return numeral(number).format('0.0 b');\n}\n\nexport function fBigNumber(number, decimals=18) {\n  return ethers.utils.formatUnits(number, decimals)\n}\n","const DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825];\r\n/**\r\n *\r\n * @param principalInUSD - amount user wants to invest in USD\r\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\r\n * @param earningTokenPrice - price of reward token\r\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\r\n * @param performanceFee - performance fee as percentage\r\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\r\n */\r\nexport const getInterestBreakdown = ({ principalInUSD, apr, earningTokenPrice, compoundFrequency = 1, performanceFee = 0, }) => {\r\n    // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n    const timesCompounded = 365 * compoundFrequency;\r\n    // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n    const aprAsDecimal = apr / 100;\r\n    // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n    // and also cause rounding errors\r\n    const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\r\n    const roundingDecimalsNew = isHighValueToken ? 5 : 3;\r\n    return DAYS_TO_CALCULATE_AGAINST.map((days) => {\r\n        const daysAsDecimalOfYear = days / 365;\r\n        // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\r\n        const principal = principalInUSD / earningTokenPrice;\r\n        let interestEarned = principal * aprAsDecimal * (days / 365);\r\n        if (timesCompounded !== 0) {\r\n            // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n            const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear);\r\n            // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\r\n            interestEarned = accruedAmount - principal;\r\n            if (performanceFee) {\r\n                const performanceFeeAsDecimal = performanceFee / 100;\r\n                const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal;\r\n                interestEarned -= performanceFeeAsAmount;\r\n            }\r\n        }\r\n        return parseFloat(interestEarned.toFixed(roundingDecimalsNew));\r\n    });\r\n};\r\n/**\r\n * @param interest how much USD amount you aim to make\r\n * @param apr APR of farm/pool\r\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\r\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\r\n */\r\nexport const getPrincipalForInterest = (interest, apr, compoundingFrequency, performanceFee = 0) => DAYS_TO_CALCULATE_AGAINST.map((days) => {\r\n        const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee);\r\n        // console.log('inside', interest, apyAsDecimal)\r\n        // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\r\n        return parseFloat((interest / apyAsDecimal).toFixed(2));\r\n    });\r\n/**\r\n * Given APR returns APY\r\n * @param apr APR as percentage\r\n * @param compoundFrequency how many compounds per day\r\n * @param days if other than 365 adjusts (A)PY for period less than a year\r\n * @param performanceFee performance fee as percentage\r\n * @returns APY as decimal\r\n */\r\nexport const getApy = (apr, compoundFrequency = 1, days = 365, performanceFee = 0) => {\r\n    const daysAsDecimalOfYear = days / 365;\r\n    const aprAsDecimal = apr / 100;\r\n    const timesCompounded = 365 * compoundFrequency;\r\n    let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear;\r\n    if (timesCompounded > 0) {\r\n        apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1;\r\n    }\r\n    if (performanceFee) {\r\n        const performanceFeeAsDecimal = performanceFee / 100;\r\n        const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal;\r\n        apyAsDecimal -= takenAsPerformanceFee;\r\n    }\r\n    return apyAsDecimal;\r\n};\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n    if (amountInvested === 0) {\r\n        return 0;\r\n    }\r\n    const percentage = (amountEarned / amountInvested) * 100;\r\n    return percentage;\r\n};","import PropTypes from 'prop-types';\r\nimport {useMemo, useState} from 'react';\r\nimport {\r\n    Button,\r\n    Card, CardActions,\r\n    CardContent,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\n\r\nimport {ethers} from \"ethers\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport {escapeRegExp} from \"../../../utils\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport {getBalanceAmount, getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nInputField.propTypes = {\r\n    tokenSymbol: PropTypes.string.isRequired,\r\n    isMax: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    placeHolder: PropTypes.string,\r\n    inputValue: PropTypes.number,\r\n    onInputChange: PropTypes.func,\r\n    onMax: PropTypes.func,\r\n    selectedToken: PropTypes.any,\r\n    tokenBalance: PropTypes.any,\r\n    max: PropTypes.any,\r\n    onConfirm: PropTypes.any,\r\n    onDismiss: PropTypes.any\r\n}\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\r\n\r\nexport default function InputField(\r\n    {\r\n        tokenSymbol = \"\",\r\n        isMax=false,\r\n        label=\"\",\r\n        placeHolder=\"\",\r\n        inputValue=\"\",\r\n        onInputChange=null,\r\n        onMax=null,\r\n        selectedToken,\r\n        tokenBalance,\r\n        max,\r\n        onConfirm,\r\n        onDismiss\r\n    }\r\n) {\r\n    const { account } = useActiveWeb3React()\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(max), [max])\r\n\r\n    const valNumber = new BigNumber(inputValue)\r\n    const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n    const enforcer = (nextUserInput) => {\r\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n            onInputChange(nextUserInput)\r\n        }\r\n    }\r\n\r\n    const isBalanceZero = max === '0' || !max\r\n\r\n    const displayBalance = (balance) => {\r\n        try{\r\n            const stakedBalanceBigNumber = getBalanceAmount(balance)\r\n            if (isBalanceZero) {\r\n                return '0'\r\n            }\r\n            if (stakedBalanceBigNumber.gt(0)) {\r\n                return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n            }\r\n            return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card sx={{maxWidth: 620}}>\r\n                <CardContent sx={{background: '#e7e9ec', margin: '5px', borderRadius:'inherit'}}>\r\n                    <div>\r\n                        <p>\r\n                            {selectedToken\r\n                                ? `Balance: ${displayBalance(tokenBalance) ?? 'Loading' } `\r\n                                : ' - '}\r\n                            {\r\n                                (account && isMax && selectedToken) &&\r\n                                <Button variant=\"outlined\" style={{marginLeft:'3px'}} onClick={onMax} size=\"small\">Max</Button>\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div style={{marginTop: '5px'}}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={8} md={8}>\r\n                                <TextField\r\n                                    inputMode=\"decimal\"\r\n                                    step=\"any\"\r\n                                    min=\"0\"\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    value={parseFloat(inputValue)}\r\n                                    variant=\"filled\"\r\n                                    label={label}\r\n                                    placeholder={placeHolder}\r\n                                    title={label}\r\n                                    onChange={(event) => {\r\n                                        enforcer(event.currentTarget.value.replace(/,/g, '.'))\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} md={4} style={{fontSize:'10px', display: 'flex', alignItems:'center'}}>\r\n                                <Button onClick={onMax} variant=\"outlined\" style={{marginRight: '5px'}}>\r\n                                    Max\r\n                                </Button>\r\n                                {tokenSymbol}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={\r\n                            async () => {\r\n                                setPendingTx(true)\r\n                                try{\r\n                                    await onConfirm(inputValue)\r\n                                    onDismiss()\r\n                                }catch(e){\r\n                                    showError(e.data ? e.data.message : e.message)\r\n                                }finally {\r\n                                    setPendingTx(false)\r\n                                }\r\n                            }}\r\n                        fullWidth\r\n                        disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}>\r\n                        Confirm\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </>\r\n    )\r\n}","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserStakedBalance, updateUserBalance } from '../../../state/actions';\r\nimport { stakeFarm } from '../../../utils/calls';\r\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from '../../../config/index';\r\nimport { BIG_TEN } from '../../../utils/bigNumber';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\n\r\nconst options = {\r\n    gasLimit: DEFAULT_GAS_LIMIT,\r\n};\r\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst sousStakeBnb = async (sousChefContract, amount) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useStakePool = (sousId, isUsingBnb = false, isCompound=false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const masterChefContract = useMasterchef();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleStake = useCallback(async (amount, decimals) => {\r\n        await stakeFarm(masterChefContract, sousId, amount, isCompound);\r\n        dispatch(updateUserStakedBalance(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n    }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\r\n    return { onStake: handleStake };\r\n};\r\nexport default useStakePool;","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from '../../../state/actions';\r\nimport { unstakeFarm } from '../../../utils/calls';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n    const gasPrice = getGasPrice();\r\n    const units = parseUnits(amount, decimals);\r\n    const tx = await sousChefContract.withdraw(units.toString(), {\r\n        gasPrice,\r\n    });\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.emergencyWithdraw({ gasPrice });\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const masterChefContract = useMasterchef();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleUnstake = useCallback(async (amount, decimals) => {\r\n        await unstakeFarm(masterChefContract, sousId, amount);\r\n        dispatch(updateUserStakedBalance(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n        dispatch(updateUserPendingReward(sousId, account));\r\n    }, [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId]);\r\n    return { onUnstake: handleUnstake };\r\n};\r\nexport default useUnstakePool;","import PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport {useMemo, useState} from \"react\";\r\nimport {ethers} from \"ethers\";\r\nimport InputField from \"./InputField\";\r\nimport useActiveWeb3React from \"../../../hooks/useWeb3\";\r\nimport {useAppDispatch} from \"../../../redux/store\";\r\nimport {showError} from \"../../../config/helpers\";\r\nimport useStakePool from \"../hooks/useStakePool\";\r\nimport useUnstakePool from \"../hooks/useUnstakePool\";\r\nimport {getFullDisplayBalance} from \"../../../utils/formatBalance\";\r\n\r\nconst StakeAction = ({\r\n    isBnbPool,\r\n    pool,\r\n    stakingTokenBalance,\r\n    isDisabled,\r\n    isUnstake\r\n}) => {\r\n    const { sousId, stakingToken, earningTokenPrice, apr, userData, stakingLimit, earningToken } = pool\r\n    const [open, setOpen] = useState(false)\r\n    const [input, setInput] = useState(false)\r\n    const { onStake } = useStakePool(sousId, isBnbPool)\r\n    const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n    const { account } = useActiveWeb3React()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const fullBalance = useMemo(() => getFullDisplayBalance(stakingTokenBalance), [stakingTokenBalance])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const openDialog = () => {\r\n        setInput(\"\")\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleInput = (val) => {\r\n        setInput(val)\r\n    }\r\n\r\n    const handleMax = () => {\r\n        setInput(fullBalance)\r\n    }\r\n\r\n    const handleStake = async (amount) => {\r\n        try {\r\n            await onStake(amount)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            console.log(e)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const handleUnstake = async (amount) => {\r\n        try{\r\n            await onUnstake(amount)\r\n        }catch (e) {\r\n            showError(e.data ? e.data.message : e.message)\r\n            console.log(e)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const onDismiss = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" color=\"primary\" disabled={isDisabled} onClick={openDialog}>\r\n                {\r\n                    isUnstake ?\r\n                        \"Unstake\"\r\n                        : \"Stake\"\r\n                }\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>\r\n                    {\r\n                        isUnstake ?\r\n                            \"Unstake\"\r\n                            : \"Stake\"\r\n                    } {stakingToken.symbol}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <InputField\r\n                        tokenSymbol={stakingToken.symbol}\r\n                        selectedToken={stakingToken.address}\r\n                        tokenBalance={stakingTokenBalance}\r\n                        onInputChange={handleInput}\r\n                        inputValue={input}\r\n                        max={stakingTokenBalance}\r\n                        onMax={handleMax}\r\n                        onConfirm={isUnstake ? handleUnstake : handleStake}\r\n                        onDismiss={onDismiss}\r\n                    />\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nStakeAction.propTypes = {\r\n    isUnstake: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n    pool: PropTypes.any,\r\n    stakingTokenBalance: PropTypes.any,\r\n    isBnbPool: PropTypes.bool\r\n}\r\n\r\nexport default StakeAction\r\n\r\n","import { useCallback } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserBalance, updateUserPendingReward } from '../../../state/actions';\r\nimport { harvestFarm } from '../../../utils/calls';\r\nimport { BIG_ZERO } from '../../../utils/bigNumber';\r\nimport getGasPrice from '../../../utils/getGasPrice';\r\nimport { useMasterchef, useSousChef } from '../../../hooks/useContract';\r\nimport { DEFAULT_GAS_LIMIT } from '../../../config/index';\r\n\r\nconst options = {\r\n    gasLimit: DEFAULT_GAS_LIMIT,\r\n};\r\nconst harvestPool = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit('0', {...options, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst harvestPoolBnb = async (sousChefContract) => {\r\n    const gasPrice = getGasPrice();\r\n    const tx = await sousChefContract.deposit({...options, value: BIG_ZERO, gasPrice});\r\n    const receipt = await tx.wait();\r\n    return receipt.status;\r\n};\r\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const masterChefContract = useMasterchef();\r\n    const handleHarvest = useCallback(async () => {\r\n        await harvestFarm(masterChefContract, sousId);\r\n        dispatch(updateUserPendingReward(sousId, account));\r\n        dispatch(updateUserBalance(sousId, account));\r\n    }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\r\n    return { onReward: handleHarvest };\r\n};\r\nexport default useHarvestPool;","import PropTypes from 'prop-types'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport useHarvestPool from \"../hooks/useHarvestPool\";\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\n\r\nfunction HarvestAction({\r\n    pool,\r\n    hasEarnings,\r\n    needsApproval,\r\n    isBnbPool,\r\n    isDisabled=false\r\n    }) {\r\n    const { sousId } = pool\r\n    const { onReward } = useHarvestPool(sousId, isBnbPool)\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const onHarvest = async () => {\r\n        setPendingTx(true)\r\n        try {\r\n            await onReward()\r\n            // showFulfill('Successfully Harvested')\r\n            setPendingTx(false)\r\n        } catch (e) {\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n            setPendingTx(false)\r\n        }\r\n    }\r\n    return (\r\n        <Button variant=\"contained\" disabled={(!hasEarnings || needsApproval || pendingTx) || isDisabled} onClick={onHarvest} >\r\n            Harvest\r\n        </Button>\r\n    )\r\n}\r\n\r\nHarvestAction.propTypes = {\r\n    pool: PropTypes.any,\r\n    hasEarnings: PropTypes.bool,\r\n    needsApproval: PropTypes.bool,\r\n    isBnbPool: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n}\r\n\r\nexport default HarvestAction","import PropTypes from 'prop-types'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport useHarvestPool from \"../hooks/useHarvestPool\";\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\nimport useStakePool from \"../hooks/useStakePool\";\r\n\r\nfunction CompoundAction({\r\n    pool,\r\n    hasEarnings,\r\n    needsApproval,\r\n    isBnbPool,\r\n    fullBalance,\r\n    isDisabled=false\r\n}) {\r\n    const { sousId, earningToken } = pool\r\n    const { onStake } = useStakePool(sousId, isBnbPool)\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n\r\n    const onCompound = async () => {\r\n        setPendingTx(true)\r\n        try {\r\n            await onStake(fullBalance, earningToken.decimals, true)\r\n            // showFulfill('Successfully Compound Rewards')\r\n            setPendingTx(false)\r\n        } catch (e) {\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!')\r\n            setPendingTx(false)\r\n        }\r\n    }\r\n    return (\r\n        <Button variant=\"contained\" disabled={!hasEarnings || needsApproval || pendingTx || isDisabled} onClick={onCompound} fullWidth >\r\n            Compound Rewards\r\n        </Button>\r\n    )\r\n}\r\n\r\nCompoundAction.propTypes = {\r\n    pool: PropTypes.any,\r\n    hasEarnings: PropTypes.bool,\r\n    needsApproval: PropTypes.bool,\r\n    isBnbPool: PropTypes.bool,\r\n    isDisabled: PropTypes.bool,\r\n    fullBalance: PropTypes.any\r\n}\r\n\r\nexport default CompoundAction","import BigNumber from 'bignumber.js'\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Grid} from \"@material-ui/core\";\r\nimport {PoolCategory} from \"../../config/constants/types\";\r\nimport {BIG_ZERO} from \"../../utils/bigNumber\";\r\nimport StakeAction from \"./components/StakeAction\";\r\nimport HarvestAction from \"./components/HarvestAction\";\r\nimport CompoundAction from \"./components/CompoundAction\";\r\nimport {getFullDisplayBalance} from \"../../utils/formatBalance\";\r\nimport {useERC20} from \"../../hooks/useContract\";\r\nimport {useApprovePool} from \"../pool-udego/hooks/useApprove\";\r\n\r\nStakeActions.propTypes = {\r\n    pool: PropTypes.any,\r\n    isCompounding: PropTypes.bool,\r\n    stakedBalance: PropTypes.any,\r\n    timeStamp: PropTypes.any\r\n}\r\n\r\nfunction StakeActions ({\r\n    pool,\r\n    isCompounding=false,\r\n    timeStamp=\"0.00\"\r\n}) {\r\n    const { sousId, stakingToken, earningToken, harvest, poolCategory, userData, earningTokenPrice } = pool\r\n    const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n    const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\r\n    const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\r\n    const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n    const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n    const needsApproval = !allowance.gt(0) && !isBnbPool\r\n    const isStaked = stakedBalance.gt(0)\r\n    const isLoading = !userData\r\n    const hasEarnings = earnings.toNumber() > 0\r\n    const fullBalance = getFullDisplayBalance(stakedBalance, earningToken.decimals)\r\n    const stakingTokenContract = useERC20(stakingToken.address || '')\r\n    const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\r\n    const isDisabled = parseFloat(timeStamp) > 0;\r\n\r\n    return (\r\n        <>\r\n            <Grid container sx={{ py: 3, textAlign: 'center' }} spacing={3}>\r\n                <Grid item xs={4} md={4}>\r\n                    <HarvestAction hasEarnings={hasEarnings} isDisabled={isDisabled} needsApproval={needsApproval} isBnbPool={isBnbPool} pool={pool} />\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    {\r\n                        needsApproval && <Button variant=\"contained\" color=\"info\" onClick={handleApprove}>\r\n                            Approve\r\n                        </Button>\r\n                    }\r\n                    {\r\n                        !needsApproval && <StakeAction pool={pool}stakingTokenBalance={stakingTokenBalance} isDisabled={needsApproval} />\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={4} md={4}>\r\n                    <StakeAction pool={pool} stakingTokenBalance={stakedBalance} isDisabled={needsApproval || !isStaked} isUnstake />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {\r\n                isCompounding &&\r\n                <div style={{padding: \"10px\"}}>\r\n                    <CompoundAction pool={pool} hasEarnings={hasEarnings} needsApproval={needsApproval} isDisabled={isDisabled} fullBalance={fullBalance} />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StakeActions","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport { useAppDispatch } from '../../../redux/store';\r\nimport { updateUserAllowance } from '../../../state/actions';\r\n\r\nimport { useSousChef } from '../../../hooks/useContract';\r\nimport { useCallWithGasPrice } from '../../../hooks/useCallWithGasPrice';\r\nimport {showError, showFulfill} from \"../../../config/helpers\";\r\n\r\nexport const useApprovePool = (lpContract, sousId, earningTokenSymbol) => {\r\n    const [requestedApproval, setRequestedApproval] = useState(false);\r\n    const { callWithGasPrice } = useCallWithGasPrice();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const { account } = useWeb3React();\r\n    const sousChefContract = useSousChef(sousId);\r\n    const handleApprove = useCallback(async () => {\r\n        try {\r\n            setRequestedApproval(true);\r\n            const tx = await callWithGasPrice(lpContract, 'approve', [sousChefContract.address, ethers.constants.MaxUint256]);\r\n            const receipt = await tx.wait();\r\n            dispatch(updateUserAllowance(sousId, account));\r\n            if (receipt.status) {\r\n                showFulfill(\"Successfully Approved!\")\r\n                setRequestedApproval(false);\r\n            }\r\n            else {\r\n                // user rejected tx or didn't go thru\r\n                showError('Please try again. Confirm the transaction and make sure you are paying enough gas!');\r\n                setRequestedApproval(false);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            showError('Please try again. Confirm the transaction and make sure you are paying enough gas!');\r\n        }\r\n    }, [\r\n        account,\r\n        dispatch,\r\n        lpContract,\r\n        sousChefContract,\r\n        sousId,\r\n        earningTokenSymbol,\r\n        showFulfill,\r\n        showError,\r\n        callWithGasPrice,\r\n    ]);\r\n    return { handleApprove, requestedApproval };\r\n};","import PropTypes from 'prop-types'\r\nimport { alpha, styled } from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Card,\r\n    Grid,\r\n    Avatar,\r\n    Divider,\r\n    Typography,\r\n    Button\r\n} from '@material-ui/core';\r\nimport BigNumber from 'bignumber.js'\r\n// utils\r\n//\r\nimport SvgIconStyle from '../../components/SvgIconStyle';\r\n\r\nimport {BIG_ZERO} from \"../../utils/bigNumber\";\r\nimport {getAprData} from \"./helpers\";\r\nimport {getBalanceNumber} from \"../../utils/formatBalance\";\r\nimport {fCurrency, fShortenNumber} from \"../../utils/formatNumber\";\r\nimport StakeActions from \"./StakeActions\";\r\nimport {formatUnit} from \"../../config/index\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst CardMediaStyle = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    position: 'relative',\r\n    justifyContent: 'center',\r\n    paddingTop: 'calc(100% * 9 / 16)',\r\n    '&:before': {\r\n        top: 0,\r\n        zIndex: 9,\r\n        content: \"''\",\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        backdropFilter: 'blur(3px)',\r\n        WebkitBackdropFilter: 'blur(3px)', // Fix on Mobile\r\n        borderTopLeftRadius: theme.shape.borderRadiusMd,\r\n        borderTopRightRadius: theme.shape.borderRadiusMd,\r\n        backgroundColor: alpha(theme.palette.primary.darker, 0.72)\r\n    }\r\n}));\r\n\r\nconst CoverImgStyle = styled('img')({\r\n    top: 0,\r\n    zIndex: 8,\r\n    width: '100%',\r\n    height: '100%',\r\n    objectFit: 'cover',\r\n    position: 'absolute'\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction InfoItem(number, label=\"\") {\r\n    return (\r\n        <Grid item xs={4}>\r\n            <Typography variant=\"caption\" sx={{ mb: 0.5, color: 'text.secondary', display: 'block' }}>\r\n                {label}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">{number}</Typography>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction FarmInfo(label=\"\", value=\"\"){\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={6} md={6}>\r\n                {label}\r\n            </Grid>\r\n            <Grid item xs={6} md={6} sx={{fontWeight:\"bold\"}}>\r\n                {value}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nStakeCard.propTypes = {\r\n    pool: PropTypes.object.isRequired,\r\n    account: PropTypes.any,\r\n    performanceFee: PropTypes.number\r\n};\r\n\r\nexport default function StakeCard({ pool, account, performanceFee=0, ...other }) {\r\n    const { stakingToken, earningToken, userData, totalStaked, stakingTokenPrice, sousId, poolWeight } = pool\r\n    const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n    const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n\r\n    const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n    const getTotalStakedBalance = () => getBalanceNumber(totalStaked, stakingToken.decimals).toFixed(2)\r\n    const withdraw = 604800\r\n    const isCompoundPool = sousId === 0\r\n    const lastInvest = userData.userLast\r\n    \r\n    const weight = poolWeight || 0\r\n\r\n    const investWithdraw = (parseFloat(lastInvest) + parseFloat(withdraw)) *  1000\r\n    const nowStamp = Date.now()\r\n\r\n    const differ = investWithdraw - nowStamp;\r\n    const timeSt = ((differ/1000) > 0 ? (differ/1000) : 0)\r\n    const hours = timeSt / ( 60 * 60 )\r\n\r\n    return (\r\n        <Card {...other}>\r\n            <CardMediaStyle>\r\n                <SvgIconStyle\r\n                    color=\"paper\"\r\n                    src=\"/static/icons/shape-avatar.svg\"\r\n                    sx={{\r\n                        width: 144,\r\n                        height: 62,\r\n                        zIndex: 10,\r\n                        bottom: -26,\r\n                        position: 'absolute'\r\n                    }}\r\n                />\r\n                <Avatar\r\n                    alt=\"Staking Pool\"\r\n                    src=\"./tokens/ude.png\"\r\n                    sx={{\r\n                        width: 64,\r\n                        height: 64,\r\n                        zIndex: 11,\r\n                        position: 'absolute',\r\n                        transform: 'translateY(-50%)'\r\n                    }}\r\n                />\r\n                <CoverImgStyle alt={stakingToken.symbol} src=\"./images/staking.png\" />\r\n            </CardMediaStyle>\r\n\r\n            <Typography variant=\"subtitle1\" align=\"center\" sx={{ mt: 6 }}>\r\n                Earn {earningToken.symbol}\r\n            </Typography>\r\n            <Typography variant=\"body2\" align=\"center\" sx={{ color: 'text.secondary' }}>\r\n                Stake {stakingToken.symbol} Tokens\r\n            </Typography>\r\n\r\n            <Box sx={{ textAlign: 'center', mt: 2, mb: 2.5 }}>\r\n                {FarmInfo(\"Multiplier\", `${Math.round(weight/100)}x`)}\r\n                {FarmInfo(\"APR\", `${earningsPercentageToDisplay?.toFixed(2)}%`)}\r\n                {FarmInfo(\"Total Staked\", `${parseFloat(getTotalStakedBalance()).toLocaleString()} ${stakingToken?.symbol}`)}\r\n                {FarmInfo(\"TVL\", `${fCurrency(parseFloat((getTotalStakedBalance() * stakingTokenPrice).toString()).toLocaleString())}`)}\r\n            </Box>\r\n\r\n            <StakeActions isCompounding={isCompoundPool} pool={pool} timeStamp={hours} />\r\n\r\n            <Divider />\r\n\r\n            <Grid container sx={{ py: 3, textAlign: 'center' }}>\r\n                {InfoItem(formatUnit(stakedBalance), \"STAKED\")}\r\n                {InfoItem(formatUnit(earnings, 8), \"REWARDS\")}\r\n                {InfoItem(`${stakedBalance > 0 ? parseFloat(hours.toString()).toFixed(2) : \"0.00\"} Hrs`, \"LOCKED\")}\r\n            </Grid>\r\n        </Card>\r\n    );\r\n}\r\n","import BigNumber from 'bignumber.js';\r\nimport { getApy } from '../../utils/compoundApyHelpers';\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from '../../utils/formatBalance';\r\n\r\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\r\n    const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\r\n    const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\r\n    const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\r\n    const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\r\n    const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\r\n    return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance };\r\n};\r\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\r\n    const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\r\n    const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\r\n    const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\r\n    const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\r\n    const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\r\n    return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance };\r\n};\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000;\r\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;\r\nexport const getAprData = (pool, performanceFee) => {\r\n    const { isAutoVault, apr } = pool;\r\n    //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n    const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;\r\n    if (isAutoVault) {\r\n        const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100;\r\n        return { apr: autoApr, autoCompoundFrequency };\r\n    }\r\n    return { apr, autoCompoundFrequency };\r\n};\r\nexport const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice) => {\r\n    const hasAutoEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\r\n    const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare);\r\n    const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction);\r\n    const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0;\r\n    const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\r\n    const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\r\n    return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay };\r\n};\r\nexport const getPoolBlockInfo = (pool, currentBlock) => {\r\n    const { startBlock, endBlock, isFinished } = pool;\r\n    const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\r\n    const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\r\n    const blocksRemaining = Math.max(endBlock - currentBlock, 0);\r\n    const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\r\n    const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\r\n    return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay };\r\n};\r\n","import {useEffect, useMemo} from 'react';\r\n// material\r\nimport {Container, Divider, Grid, Skeleton} from '@material-ui/core';\r\n// redux\r\nimport { useDispatch } from '../redux/store';\r\n// routes\r\n// hooks\r\nimport useSettings from '../hooks/useSettings';\r\n// components\r\nimport Page from '../components/Page';\r\nimport {getPools} from \"../redux/slices/pools\";\r\nimport {PAGE_TITLE} from \"../contexts/Constants\";\r\nimport {StakeCard} from \"./stake-udego/index\";\r\nimport useActiveWeb3React from \"../hooks/useWeb3\";\r\nimport {useFetchPublicPoolsData, useFetchUserPools, usePools} from \"../state/pools/hooks\";\r\nimport {usePollFarmsPublicData} from \"../state/farms/hooks\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst SkeletonLoad = (\r\n    <>\r\n        {[...Array(8)].map((_, index) => (\r\n            <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <Skeleton variant=\"rectangular\" width=\"100%\" sx={{ paddingTop: '115%', borderRadius: 2 }} />\r\n            </Grid>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default function UdegoStake() {\r\n    const { themeStretch } = useSettings();\r\n\r\n    const { account } = useActiveWeb3React()\r\n    const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools()\r\n\r\n    const pools = useMemo(() => {\r\n        const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\r\n        return [...poolsWithoutAutoVault]\r\n    }, [poolsWithoutAutoVault])\r\n\r\n    usePollFarmsPublicData()\r\n    useFetchPublicPoolsData()\r\n    useFetchUserPools(account)\r\n\r\n    return (\r\n        <Page title={`Stake | ${PAGE_TITLE}`}>\r\n            <Container maxWidth={themeStretch ? false : 'lg'}>\r\n                <div>\r\n                    <h2>Stake & Earn Rewards</h2>\r\n                    <p>Stake tokens to earn rewards with high returns and high multipliers</p>\r\n                </div>\r\n                <br />\r\n                <Divider />\r\n                <br />\r\n                <Grid container spacing={3}>\r\n                    {pools && pools.map((farm) => (\r\n                        <Grid key={farm.id} item xs={12} sm={6} md={4}>\r\n                            <StakeCard pool={farm} account={account} />\r\n                        </Grid>\r\n                    ))}\r\n                    {(!pools || !pools.length) && SkeletonLoad}\r\n                </Grid>\r\n            </Container>\r\n        </Page>\r\n    );\r\n}\r\n","import { useEffect, useMemo } from 'react';\r\nimport BigNumber from 'bignumber.js';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { useAppDispatch } from '../../redux/store';\r\nimport { simpleRpcProvider } from '../../utils/providers';\r\nimport useRefresh from '../../hooks/useRefresh';\r\nimport {fetchPoolsPublicDataAsync, fetchPoolsStakingLimitsAsync, fetchPoolsUserDataAsync} from '.';\r\nimport { transformPool } from './helpers';\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { slowRefresh } = useRefresh();\r\n    useEffect(() => {\r\n        const fetchPoolsPublicData = async () => {\r\n            const blockNumber = await simpleRpcProvider.getBlockNumber();\r\n            dispatch(fetchPoolsPublicDataAsync(blockNumber));\r\n        };\r\n        fetchPoolsPublicData();\r\n        dispatch(fetchPoolsStakingLimitsAsync())\r\n    }, [dispatch, slowRefresh]);\r\n};\r\nexport const useFetchUserPools = (account) => {\r\n    const { fastRefresh } = useRefresh();\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n        if (account) {\r\n            dispatch(fetchPoolsUserDataAsync(account));\r\n        }\r\n    }, [account, dispatch, fastRefresh]);\r\n};\r\nexport const usePools = () => {\r\n    const { pools, userDataLoaded } = useSelector((state) => ({\r\n        pools: state.pools.data,\r\n        userDataLoaded: state.pools.userDataLoaded,\r\n    }));\r\n    return { pools: pools.map(transformPool), userDataLoaded };\r\n};\r\n\r\nexport const useCakeVault = () => {\r\n    const { totalShares: totalSharesAsString, pricePerFullShare: pricePerFullShareAsString, totalCakeInVault: totalCakeInVaultAsString, estimatedCakeBountyReward: estimatedCakeBountyRewardAsString, totalPendingCakeHarvest: totalPendingCakeHarvestAsString, fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod }, userData: { isLoading, userShares: userSharesAsString, cakeAtLastUserAction: cakeAtLastUserActionAsString, lastDepositedTime, lastUserActionTime, }, } = useSelector((state) => state.pools.cakeVault);\r\n    const estimatedCakeBountyReward = useMemo(() => new BigNumber(estimatedCakeBountyRewardAsString), [estimatedCakeBountyRewardAsString]);\r\n    const totalPendingCakeHarvest = useMemo(() => new BigNumber(totalPendingCakeHarvestAsString), [totalPendingCakeHarvestAsString]);\r\n    const totalShares = useMemo(() => new BigNumber(totalSharesAsString), [totalSharesAsString]);\r\n    const pricePerFullShare = useMemo(() => new BigNumber(pricePerFullShareAsString), [pricePerFullShareAsString]);\r\n    const totalCakeInVault = useMemo(() => new BigNumber(totalCakeInVaultAsString), [totalCakeInVaultAsString]);\r\n    const userShares = useMemo(() => new BigNumber(userSharesAsString), [userSharesAsString]);\r\n    const cakeAtLastUserAction = useMemo(() => new BigNumber(cakeAtLastUserActionAsString), [cakeAtLastUserActionAsString]);\r\n    return {\r\n        totalShares,\r\n        pricePerFullShare,\r\n        totalCakeInVault,\r\n        estimatedCakeBountyReward,\r\n        totalPendingCakeHarvest,\r\n        fees: {\r\n            performanceFee,\r\n            callFee,\r\n            withdrawalFee,\r\n            withdrawalFeePeriod,\r\n        },\r\n        userData: {\r\n            isLoading,\r\n            userShares,\r\n            cakeAtLastUserAction,\r\n            lastDepositedTime,\r\n            lastUserActionTime,\r\n        },\r\n    };\r\n};\r\n"],"sourceRoot":""}